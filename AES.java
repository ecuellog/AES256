public class AES {
	// used for subbytes

	public static int Nb = 4;
	public static int Nk = 8;
	public static int Nr = 14;

	private static int[] sbox = { 
		0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
		0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
		0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
		0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
		0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
		0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
		0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
		0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
		0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
		0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
		0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
		0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
		0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
		0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
		0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
		0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16 
	};
	
	private static int[] invsbox = { 
		0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D 
	};

	private static int[] rcon = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
		0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
		0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
		0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
		0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
		0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
		0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
		0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
		0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
		0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
		0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
		0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
		0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
		0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
		0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
		0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb };

	// THIS IS WORKING
	public static byte[] SubWord(byte[] in) {
		// swap vals for sbox vals.
		in[0] = (byte)(sbox[in[0] & 0xFF]);
		in[1] = (byte)(sbox[in[1] & 0xFF]);
		in[2] = (byte)(sbox[in[2] & 0xFF]);
		in[3] = (byte)(sbox[in[3] & 0xFF]);

		return in;
	}

	// THIS IS WORKING
	public static byte[] KeyExpansionCore(byte[] in, byte i) {
		// rotate in;
		byte t = in[0];
		in[0] = in[1];
		in[1] = in[2];
		in[2] = in[3];
		in[3] = t;

		// swap vals for sbox vals.
		in = SubWord(in);

		//Rcon step
		in[0] ^= rcon[i];

		return in;
	}

	// THIS IS WORKING
	public static byte[] KeyExpansion(byte[] inputKey) {
		byte[] expandedKey = new byte[240];

		for (int i = 0; i < 32; i++) {
			expandedKey[i] = inputKey[i];
		}

		// variables
		int bytesGenerated = 32; 	// we have 32 bytes to start
		byte rconIteration = 1;		// rcon iteration begins at 1
		byte[] temp = new byte[4];	// temp storage for core

		while (bytesGenerated < 240) {
			for (int i = 0; i < 4; i++) {
				temp[i] = expandedKey[i + bytesGenerated - 4];
			}
			if (bytesGenerated % 32 == 0) {
				temp = KeyExpansionCore(temp, rconIteration);
				rconIteration++;
			} else if (Nk == 8 && (bytesGenerated % 32 == 16)) {
				temp = SubWord(temp);
			}
			// XOR temp with bytes expandedKey[bytesGenerated - 16], and store in expandedKey
			for (byte a = 0; a < 4; a++) {
				expandedKey[bytesGenerated] = (byte)((expandedKey[bytesGenerated - 32] ^ temp[a]));
				bytesGenerated++;
			}
		}

		return expandedKey;
	}

	public static byte[] SubBytes(byte[] state) {
		for (int i = 0; i < 16; i++) {
			state[i] = (byte)(sbox[state[i] & 0xFF]);
		}
		return state;
	}

	public static byte[] ShiftRows(byte[] state) {
		byte[] tmp = new byte[16];
		tmp[0] = state[0];
		tmp[1] = state[5];
		tmp[2] = state[10];
		tmp[3] = state[15];

		tmp[4] = state[4];
		tmp[5] = state[9];
		tmp[6] = state[14];
		tmp[7] = state[3];

		tmp[8] = state[8];
		tmp[9] = state[13];
		tmp[10] = state[2];
		tmp[11] = state[7];

		tmp[12] = state[12];
		tmp[13] = state[1];
		tmp[14] = state[6];
		tmp[15] = state[11];

		for (int i = 0; i < 16; i++) {
			state[i] = tmp[i];
		}

		return state;
	}

	// multiply state with special matrix of 1s, 2s and 3s
	// compute dot products
	// multiply bytes as galois fields
	// reduce answers by magic polynomial
	// XOR results.
	public static byte[] MixColumns(byte[] state) {
		byte[] a = new byte[4];
		byte[] b = new byte[4];
		byte h;
		int c;
		for (int i = 0; i < 4; i++) {
			for (c = 0; c < 4; c++) {
				a[c] = state[i*4 + c];
				h = (byte)((state[i*4 + c]&0xFF) & 0x80);
				b[c] = (byte)((state[i*4+c]&0xFF) << 1);
				if ((h&0xFF) == 0x80) {
					b[c] ^= 0x1b;
				}
			}

			state[i*4 + 0] = (byte)(b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1]);
			state[i*4 + 1] = (byte)(b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2]);
			state[i*4 + 2] = (byte)(b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3]);
			state[i*4 + 3] = (byte)(b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0]);
		}

		return state;
	}

	public static byte[] AddRoundKey(byte[] state, byte[] roundKey, int startIndex) {
		for (int i=0;i<16;i++) {
			state[i] ^= roundKey[i + startIndex];
		}

		return state;
	}

	public static byte[] AES_Encrypt(byte[] block, byte[] key, int startIndex) {
		byte[] state = new byte[16];

		// copy message block to state array
		// we will run algo on state and then copy back into block
		for (int i = 0; i < 16; i++) {
			state[i] = block[i + startIndex];
		}

		// our key will be 224 bytes long
		byte[] expandedKey;
		expandedKey = KeyExpansion(key);
		state = AddRoundKey(state, expandedKey, 0); // Whitening/AddRoundKey
	
		for (int i = 1; i < Nr; i++) {
			state = SubBytes(state);
			state = ShiftRows(state);
			state = MixColumns(state);
			state = AddRoundKey(state, expandedKey, (16 * (i)));
		}

		// final round
		state = SubBytes(state);
		state = ShiftRows(state);
		state = AddRoundKey(state, expandedKey, 224);

		// return encrypted message
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i< 16; i++) {
			sb.append(String.format("%02X ", state[i]));
			block[i] = state[i];
		}
		System.out.println("");
		System.out.println(sb.toString());


		return block;
	}
	
	public static byte[] AES_Decrypt(byte[] block, byte[] key, int startIndex) {
		byte[] state = new byte[16];

		// copy message block to state array
		// we will run algo on state and then copy back into block
		for (int i = 0; i < 16; i++) {
			state[i] = block[i + startIndex];
		}

		// our key will be 224 bytes long
		byte[] expandedKey;
		expandedKey = KeyExpansion(key);
		state = AddRoundKey(state, expandedKey, 0); // Whitening/AddRoundKey
		
		state = AddRoundKey(state, expandedKey, 224); //Initial Round
		state = invShiftRows(state);
		state = invSubBytes(state);
	
		for (int i = 1; i < Nr; i++) {
			state = AddRoundKey(state, expandedKey, (16 * (i)));
			state = invMixColumns(state);
			state = invShiftRows(state);
			state = invSubBytes(state);
		}

		// return decrypted message
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i< 16; i++) {
			sb.append(String.format("%02X ", state[i]));
			block[i] = state[i];
		}
		System.out.println("");
		System.out.println(sb.toString());


		return block;
	}

	public static void InvMixColumns(byte[] state) {
		byte[] a = new byte[4];
		byte[] b = new byte[4];
		byte h;
		int c;
		for (int i = 0; i < 4; i++) {
			for (c = 0; c < 4; c++) {
				a[c] = state[i*4 + c];
				h = (byte)((state[i*4 + c]&0xFF) & 0x80);
				b[c] = (byte)((state[i*4+c]&0xFF) << 1);
				if ((h&0xFF) == 0x80) {
					b[c] ^= 0x1b;
				}
			}

			state[i*4 + 0] = (byte)(b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1]);
			state[i*4 + 1] = (byte)(b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2]);
			state[i*4 + 2] = (byte)(b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3]);
			state[i*4 + 3] = (byte)(b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0]);
		}

		return state;
	}

	public static void InvShiftRows(byte[] state) {
		byte[] tmp = new byte[16];
		tmp[0] = state[0];
		tmp[1] = state[13];
		tmp[2] = state[10];
		tmp[3] = state[7];

		tmp[4] = state[4];
		tmp[5] = state[1];
		tmp[6] = state[14];
		tmp[7] = state[11];

		tmp[8] = state[8];
		tmp[9] = state[5];
		tmp[10] = state[2];
		tmp[11] = state[15];

		tmp[12] = state[12];
		tmp[13] = state[9];
		tmp[14] = state[6];
		tmp[15] = state[3];

		for (int i = 0; i < 16; i++) {
			state[i] = tmp[i];
		}

		return state;
	}

	public static void InvSubBytes(byte[] state) {
		for (int i = 0; i < 16; i++) {
			state[i] = (byte)(invsbox[state[i] & 0xFF]);
		}
		return state;
	}

	public static void main(String[] args) {

		// String s = "db135345f20a225c01010101c6c6c6c6";
		// byte[] message = new byte[s.length() / 2];

		// for (int i = 0; i < s.length(); i+=2) {
		// 	String str = s.substring(i, i+2);
		// 	message[i/2] = (byte)Integer.parseInt(str, 16);
		// }

		// for (int i = 0; i < s.length() / 2; i++) {
		// 	System.out.println(message[i]);
		// }

		byte[] message = {
			'T', 'h', 'i', 's',
			' ', 'i', 's', ' ',
			'a', ' ', 'm', 'e',
			's', 's', 'a', 'g',
		};

		byte[] key = {
			'1', '2', '3', '4',
			'5', '6', '7', '8',
			'1', '2', '3', '4',
			'5', '6', '7', '8',
			'1', '2', '3', '4',
			'5', '6', '7', '8',
			'1', '2', '3', '4',
			'5', '6', '7', '8',
		};

		byte[] block;

		// MixColumns(message);		

		for (int i = 0; i < message.length; i+= 16) {
			block = AES_Encrypt(message, key, i);
		}

	}


}
